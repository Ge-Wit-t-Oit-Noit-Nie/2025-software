
/**
 * @file datetime.h
 * @brief Defenition of date and time utility functions implemented in datetime.c.
 *
 * This file contains functions for handling and manipulating date and time
 * values, such as formatting, parsing, and calculating differences between
 * dates. It is designed to be used in C projects that require basic datetime
 * operations without relying on external libraries.
 *
 * @author R. Middel
 * @date 2025-06-25
 * @version 1.0
 *
 * @see datetime.c
 * 
 * @copyright Copyright (c) 2025 R. Middel. 
 * This file is part of the Base project and is licensed under the MIT License.
 * See the LICENSE file in the root of the project for full license text.
 * SPDX-License-Identifier: MIT
 * 
 */

 #ifndef __GWTONN_DATETIME__
 #define __GWTONN_DATETIME__
 
 #include <stdint.h>
 #include <stdio.h>
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /**
  * @def DT_FORMAT_STRING
  * @brief Inject a string to format a datetime_t
  *
  * This macro can inject a format string. 
  * 
  * @code
  * void print_now() {
  * 		datetime_t now;
  * 
  * 		dt_now(&now);
  * 		printf("The current time is " DT_FORMAT_STRING " ", now.year, now.month, now.day,
  * 		now.hour, now.minute, now.second, now.millisecond);
  * 
  * }
  * @endcode
  * 
  * @param ptr The pointer to check.
  * @param retval The value to return if the pointer is NULL.
  *
  * @note Useful for functions that return a value and need to fail gracefully
  *       when given a NULL pointer.
  */
 #define DT_FORMAT_STRING "%04d-%02d-%2d %02d:%02d:%02d.%03d"
 
 /**
  * @typedef dt_dense_time
  * @brief A compact 64-bit representation of a full date and time.
  *
  * This type is used to store an encoded timestamp with millisecond precision
  * in a single 64-bit unsigned integer. It is generated by functions like
  * `dt_encode()` and can be decoded back into a `datetime_t` structure.
  *
  * The encoding ensures that chronological order is preserved when comparing
  * two `dt_dense_time` values directly.
  */
 typedef uint64_t dt_dense_time;
 
 /**
  * @struct datetime_t
  * @brief Represents a full date and time with millisecond precision.
  *
  * This structure holds individual components of a timestamp, including
  * year, month, day, hour, minute, second, and millisecond. It is designed
  * to be used with functions like `dt_encode` to convert to or from a
  * compact integer representation.
  */
 typedef struct {
     int32_t year;         /**< Year (e.g., 2025). Can be negative for BCE dates. */
     uint8_t month;        /**< Month of the year (1–12). */
     uint8_t day;          /**< Day of the month (1–31). */
 
     uint8_t hour;         /**< Hour of the day (0–23). */
     uint8_t minute;       /**< Minute of the hour (0–59). */
     uint8_t second;       /**< Second of the minute (0–59). */
     uint16_t millisecond; /**< Millisecond of the second (0–999). */
 } datetime_t;
 
 /**
 * @brief Encodes a datetime structure into a dense 64-bit integer format.
 *
 * This function converts a full date and time (year, month, day, hour, minute,
 * second, millisecond) into a single `dt_dense_time` value. The encoding is
 * performed by successively multiplying and adding each component to ensure
 * chronological order is preserved in the resulting integer.
 *
 * The year is offset by 0x8000 (32768) to allow representation of both past
 * and future years in an unsigned 32-bit space.
 *
 * @param datetime Pointer to a `datetime_t` structure containing the date and
 *time to encode.
 * @param encoded The dense 64-bit timestamp encoded 
 *
 * @note This encoding is useful for compact storage, fast comparisons, and
 *       sorting of timestamps.
 */
 void dt_encode(const datetime_t *datetime, dt_dense_time *encoded);
 /**
 * @brief Decodes a dense 64-bit timestamp into a datetime structure.
 *
 * This function reverses the encoding performed by `dt_encode()`, extracting
 * the original year, month, day, hour, minute, second, and millisecond values
 * from a `dt_dense_time` value.
 *
 * @param encoded The dense 64-bit timestamp to decode.
 * @param out Pointer to a `datetime_t` structure where the result will be
 * stored.
 */
 void dt_decode(dt_dense_time encoded, datetime_t *out);
 
 /**
  * @brief Prints a formatted timestamp to the specified output stream.
  *
  * This function writes the contents of a `datetime_t` structure to the given
  * `FILE` stream using a predefined format string (`DT_FORMAT_STRING`).
  * It performs null checks on both the `timestamp` and `target` parameters
  * before printing.
  *
  * @param target A pointer to the output stream (e.g., stdout, stderr, or a file).
  * @param timestamp A pointer to the `datetime_t` structure to print.
  *
  * @note If either `target` or `timestamp` is NULL, the function returns early.
  *
  * @par Example:
  * This sample returns the current timestamp and prints it to the stdout
  * @code
  * datetime_t now;
  * dt_now(&now);
  * dt_print(stdout, &now);
  * @endcode
  */
 void dt_print(FILE *target, datetime_t *timestamp);
 
 #ifdef __cplusplus
 }
 #endif
 
 
 #endif //__GWTONN_DATETIME__